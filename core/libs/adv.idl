interface Size {
    float width;
    float height;
};

[Struct]
interface Color {
    attribute int red;
    attribute int blue;
    attribute int green;
    attribute int alpha;
};

[Struct]
interface Alignment {
    attribute Value left;
    attribute Value top;
    attribute Value right;
    attribute Value bottom;
};

interface DesktopWindow {
    readonly attribute Size size;
};

interface DesktopApp {
    void run();
    void stop();    
};

[Name="SignalConnection", Mapper="ConnectionMapper"]
callback Disconnector = void();

callback ElementSizeObserver = void(Size size);

callback PointerEventHandler = void(PointerEvent event);

[Exposed]
interface Document {
    [Setter="set_root"]
    attribute Element root;
    
    Connection observeElementSize(Element element, ElementSizeObserver observer);
    Connection addPointerEventHandler(PointerEventHandler handler);
    Connection addScrollHandler();
    Connection addKeyHandler();
    Connection startTrackingPointer();
};

[Exposed]
namespace AnimationFrame {
    int requestAnimationFrame();
    void cancelAnimationFrame(int id);
};

[Exposed]
interface Element {
    [Getter="get_debug_name"]
    readonly attribute string name;
    readonly attribute Size size;
    readonly attribute Position relPosition;
    readonly attribute Element parent;
    readonly attribute Document document;
    readonly attribute sequence<Element> children;
    void appendChild(Element child);
    void removeChild(Element child);
    void insertChildBefore(Element child, Element beforeChild);
};

// Elements

[Exposed]
interface AlignedElement : Element {
    [Setter="set_alignment"]
    attribute Alignment alignment;
    [Setter="set_adjust_child_size"]
    attribute bool adjustChildSize;
};

[Exposed]
interface CenterElement : Element {};

[Exposed]
interface BackgroundElement : Element {
    [Setter="set_color"]
    attribute Color color;
};
